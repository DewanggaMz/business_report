// This is your Prisma schema file for PostgreSQL
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  phone         String?
  image         String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  businesses BusinessOwner[]
  accounts   Account[]
  sessions   Session[]
  ChangeLog  ChangeLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Business {
  id          String @id @default(cuid())
  name        String
  address     String
  description String
  creatorId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owners            BusinessOwner[]
  Transaction       Transaction[]
  BalanceSheet      BalanceSheet[]
  Stock             Stock[]
  BEPAnalysis       BEPAnalysis[]
  Monitoring        Monitoring[]
  ChangeLog         ChangeLog[]
  ProfitLossReport  ProfitLossReport[]
  AdditionalExpense AdditionalExpense[]
  StockTransaction  StockTransaction[]

  @@map("businesses")
}

model BusinessOwner {
  id         String  @id @default(cuid())
  businessId String
  userId     String
  capital    Decimal

  business Business @relation(fields: [businessId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, businessId])
  @@map("business_owners")
}

model Transaction {
  id          Int             @id @default(autoincrement())
  date        DateTime        @default(now())
  type        TransactionType
  amount      Decimal
  description String?
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  business    Business        @relation(fields: [businessId], references: [id])
  businessId  String

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Category {
  id          String          @id @default(cuid())
  name        String          @unique
  type        TransactionType
  Transaction Transaction[]

  @@map("categories")
}

model BalanceSheet {
  id               String      @id @default(cuid())
  period           String
  totalAssets      Decimal
  totalLiabilities Decimal
  totalEquity      Decimal
  generatedAt      DateTime    @default(now())
  businessId       String
  assets           Asset[]
  liabilities      Liability[]
  equities         Equity[]

  business Business @relation(fields: [businessId], references: [id])

  @@map("balance_sheets")
}

model Asset {
  id             String       @id @default(cuid())
  type           AssetType
  amount         Decimal
  description    String?
  balanceSheet   BalanceSheet @relation(fields: [balanceSheetId], references: [id])
  balanceSheetId String

  @@map("assets")
}

enum AssetType {
  CURRENT_ASSET // Aset Lancar (Kas, Piutang, Persediaan)
  FIXED_ASSET // Aset Tetap (Mesin, Tanah, Bangunan)
}

model Liability {
  id             String        @id @default(cuid())
  type           LiabilityType
  amount         Decimal
  description    String?
  balanceSheet   BalanceSheet  @relation(fields: [balanceSheetId], references: [id])
  balanceSheetId String

  @@map("liabilities")
}

enum LiabilityType {
  SHORT_TERM // Kewajiban Jangka Pendek (Hutang Dagang)
  LONG_TERM // Kewajiban Jangka Panjang (Pinjaman Bank)
}

model Equity {
  id             String       @id @default(cuid())
  type           EquityType
  amount         Decimal
  description    String?
  balanceSheet   BalanceSheet @relation(fields: [balanceSheetId], references: [id])
  balanceSheetId String

  @@map("equities")
}

enum EquityType {
  OWNER_EQUITY // Modal Pemilik
  RETAINED_EARNINGS // Laba Ditahan
}

model ProfitLossReport {
  id           String   @id @default(cuid())
  period       String
  totalIncome  Decimal
  totalExpense Decimal
  netProfit    Decimal
  generatedAt  DateTime @default(now())
  business     Business @relation(fields: [businessId], references: [id])
  businessId   String

  @@map("profit_loss_reports")
}

model AdditionalExpense {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  amount      Decimal
  description String?
  business    Business @relation(fields: [businessId], references: [id])
  businessId  String
}

model Stock {
  id               String             @id @default(cuid())
  name             String             @unique
  quantity         Int
  unitPrice        Decimal
  lastUpdated      DateTime           @updatedAt
  business         Business           @relation(fields: [businessId], references: [id])
  businessId       String
  StockTransaction StockTransaction[]

  @@map("stocks")
}

model StockTransaction {
  id         String               @id @default(cuid())
  date       DateTime             @default(now())
  type       StockTransactionType
  quantity   Int
  unitPrice  Decimal
  stock      Stock                @relation(fields: [stockId], references: [id])
  stockId    String
  business   Business             @relation(fields: [businessId], references: [id])
  businessId String
}

enum StockTransactionType {
  PURCHASE
  SOLD
  ADJUSTMENT
}

model BEPAnalysis {
  id             String   @id @default(cuid())
  fixedCost      Decimal
  variableCost   Decimal
  sellingPrice   Decimal
  breakEvenPoint Decimal
  dateCalculated DateTime @default(now())
  business       Business @relation(fields: [businessId], references: [id])
  businessId     String

  @@map("bep_analyses")
}

model Monitoring {
  id          String         @id @default(cuid())
  period      String
  type        MonitoringType
  totalAmount Decimal
  business    Business       @relation(fields: [businessId], references: [id])
  businessId  String

  @@map("monitorings")
}

enum MonitoringType {
  REVENUE_MONTHLY
  REVENUE_YEARLY
  EXPENSE_MONTHLY
  EXPENSE_YEARLY
}

model ChangeLog {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  tableName  String
  recordId   String
  changeType String
  changeData Json
  timestamp  DateTime @default(now())

  @@map("change_logs")
}
